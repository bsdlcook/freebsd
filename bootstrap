#!/bin/sh

readonly PREFIX="/usr/local"
readonly DOCDIR="${PREFIX}/share/doc/freebsd/en/books"
readonly DEVDIR="$HOME/Development"
readonly MANDIR="${DEVDIR}/manual"

log() {
	printf "%s\n" "$*"
}

die() {
	log "$*" >&2
	exit 1
}

phase() {
	log "=======================<phase: $*>============================"
}

user_check() {
	phase "user_check"

	log "=> Checking user permissions."
	if [ "$(id -u)" -eq 0 ]; then
		die "Please re-run this script as a non-privileged user."
	fi

	log "=> Checking for doas."
	if [ -z "$(pkg info -x security/doas 2> /dev/null)" ]; then
		die "Please install doas by running 'pkg install security/doas' with a privileged user; after add your user account with the command: echo 'permit nopass ${USER} as root' | tee -a ${PREFIX}/etc/doas.conf - then re-run the script."
	fi
}

check_package() {
	if [ -z "$(pkg info -x "$1" 2> /dev/null | head -n1)" ]; then
		doas pkg install -y "$1" > /dev/null 2>&1
	fi
}

download_packages() {
	phase "download_packages"

	readonly PKGFILE=".packages"
	readonly DATABASE="/var/db/pkg/repo-FreeBSD.sqlite"

	log "=> Checking for package file."
	if [ ! -f "${PKGFILE}" ]; then
		die "Package file '${PKGFILE}' not found in directory. Please check the integrity of the files and are not missing or corrupted."
	fi

	log "=> Checking for package repository database."
	if [ ! -f "${DATABASE}" ]; then
		log "Before we begin the package repository will be updated."
		doas pkg update -f > /dev/null 2>&1
	fi

	readonly PKGCOUNT=$(wc -l "${PKGFILE}" | awk '{print $1}')

	log "=> Installing packages."
	(
		COUNTER=0

		while read -r PKG; do
			COUNTER=$((COUNTER + 1))
			log "Downloading package ${PKG} (${COUNTER}/${PKGCOUNT})."
			check_package "${PKG}"
		done < "${PKGFILE}"
	)
}

change_shell() {
	phase "change_shell"

	log "=> Changing default shell to fish."
	(
		doas chsh -s "$(command -v fish)" "${USER}" > /dev/null 2>&1
	)
}

dbus_service() {
	phase "dbus_service"

	log "=> Generating machine-id."
	(
		dbus-uuidgen | doas tee /etc/machine-id > /dev/null
	)

	log "=> Enabling dbus and hald."
	(
		doas sysrc dbus_enable="YES" > /dev/null
		doas sysrc hald_enable="YES" > /dev/null
	)
}

bootstrap_manuals() {
	phase "bootstrap_manuals"

	if [ ! -d "${MANDIR}" ]; then
		mkdir -p "${MANDIR}"
	fi

	log "=> Bootstrapping manuals."
	(
		COUNTER=0

		for MANUAL in $(find "${DOCDIR}" -type f -name "*.pdf"); do
			COUNTER=$((COUNTER + 1))
			PDF="$(echo "${MANUAL}" | sed -e "s|${DOCDIR}||" | awk -F/ '{printf "%s.pdf\n", $2}')"
			log "Copying manual ${PDF}."
			cp -f "${MANUAL}" "${MANDIR}/${PDF}"
		done
	)
}

bootstrap_files() {
	phase "bootstrap_files"

	readonly DIRS=".gitconfig .git-credentials .gitmessage .ansible .config .scripts .xinitrc .porttools"

	log "=> Bootstrapping files."
	(
		for DIR in ${DIRS}; do
			for FILE in $(find "${DIR}" -type f); do
				log "Copying file ${FILE}."
				echo "${FILE}" | cpio -p -d "/usr/home/${USER}" > /dev/null 2>&1
			done
		done
	)
	
	readonly SCRIPTS=$(find .scripts -type f -depth 1 -print)
	
	log "=> Symlinking scripts to ${PREFIX}/bin."
	(
		echo "${SCRIPTS}" | xargs -n1 -I % doas ln -s "$HOME/%" ${PREFIX}/bin 2> /dev/null
	)
}

user_check
download_packages
change_shell
dbus_service
bootstrap_manuals
bootstrap_files

log "*** Bootstrap completed. Please reboot your system to finalize the changes. ***"
