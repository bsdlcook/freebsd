#!/usr/bin/env bash

readonly PREFIX="/usr/local"
readonly DOCDIR="${PREFIX}/share/doc/freebsd/en/books"
readonly DEVDIR="/usr/home/${USER}/Development"
readonly MANDIR="${DEVDIR}/manual"

log() {
	printf "%s\n" "$*"
}

error() {
	log "$*" >&2
	exit 1
}

phase() {
	log "=======================<phase: $*>============================"
}

user_check() {
	phase "${FUNCNAME[0]}"

	log "Checking user permissions."
	if [[ "$(id -u)" -eq 0 ]]; then
		error "Please re-run this script as a non-privileged user."
	fi

	log "Checking for doas."
	if [[ -z "$(pkg info -x security/doas 2> /dev/null)" ]]; then
		error "Please install doas by running: 'pkg install security/doas' with a privileged user; after add your user account with the command: echo 'permit nopass ${USER} as root' | tee -a /usr/local/etc/doas.conf - then re-run the script."
	fi
}

check_package() {
	if [[ -z "$(pkg info -x "$1" 2> /dev/null | head -n1)" ]]; then
		doas pkg install -y "$1" &> /dev/null
	fi
}

download_packages() {
	phase "${FUNCNAME[0]}"

	local PKGFILE=".packages.full"
	local DATABASE="/var/db/pkg/repo-FreeBSD.sqlite"

	log "Checking for package file."
	if [[ ! -f "${PKGFILE}" ]]; then
		error "Package file '${PKGFILE}' not found in directory. Please ensure the integrity of the files are not missing or corrupted."
	fi

	log "Checking for package repository database."
	if [[ ! -f "${DATABASE}" ]]; then
		log "Before we begin the package repository will be updated."
		doas pkg update -f 2> /dev/null
	fi

	local PACKAGES=()
	local COUNTER=0
	local PKGCOUNT=0

	log "Reading package file '${PKGFILE}'."
	while read -r PACKAGE; do
		PACKAGES+=("${PACKAGE}")
	done < "${PKGFILE}"

	log "Installing packages."
	PKGCOUNT="${#PACKAGES[@]}"
	for PACKAGE in ${PACKAGES[*]}; do
		((++COUNTER))
		log "Downloading package ${PACKAGE} (${COUNTER}/${PKGCOUNT})."
		check_package "${PACKAGE}"
	done
}

change_shell() {
	phase "${FUNCNAME[0]}"

	log "Changing default shell to $(command -v fish)."
	doas chsh -s "$(command -v fish)" "${USER}" &> /dev/null
}

dbus_service() {
	phase "${FUNCNAME[0]}"

	log "Generating machine-id."
	dbus-uuidgen | doas tee /etc/machine-id > /dev/null

	log "Enabling dbus and hald."
	doas sysrc dbus_enable="YES" > /dev/null
	doas sysrc hald_enable="YES" > /dev/null
}

bootstrap_manuals() {
	phase "${FUNCNAME[0]}"

	if [[ ! -d "${MANDIR}" ]]; then
		mkdir -p "${MANDIR}"
	fi

	mapfile -t MANUALS < <(find "${DOCDIR}" -type f -name "*.pdf")
	local FILECOUNT="${#MANUALS[@]}"
	local COUNTER=0

	for MANUAL in ${MANUALS[*]}; do
		((++COUNTER))
		DEST="$(echo "${MANUAL}" | sed -e "s|${DOCDIR}||" | awk -F/ '{printf "%s.pdf\n", $2}')"
		log "Copying manual ${DEST} (${COUNTER}/${FILECOUNT})"
		cp -f "${MANUAL}" "${MANDIR}/${DEST}"
	done
}

bootstrap_files() {
	phase "${FUNCNAME[0]}"

	mapfile -t FILES < <(find {.gitconfig,.git-credentials,.gitmessage,.ansible,.emacs.d,.config,.scripts,.xinitrc,.porttools} -type f 2> /dev/null)
	local FILECOUNT="${#FILES[@]}"
	local COUNTER=0

	for FILE in ${FILES[*]}; do
		((++COUNTER))
		log "Copying file $FILE (${COUNTER}/${FILECOUNT})."
		echo "${FILE}" | cpio -p -d "/usr/home/${USER}" &> /dev/null
	done

	log "Symlinking scripts to /usr/local/bin."
	doas ln -s "/usr/home/${USER}/.scripts/"{open-stream,open-manual,screenshot,gl-update,gl-project,gl-port-update} /usr/local/bin 2> /dev/null
}

main() {
	user_check
	download_packages
	change_shell
	dbus_service
	bootstrap_manuals
	bootstrap_files

	log
	log "*** Bootstrap completed. Please reboot your system to finalize the changes. ***"
}

main
