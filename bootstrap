#!/usr/bin/env bash
# shellcheck disable=SC2015

SCRIPT_VERSION="2.24"
SCRIPT_FILE=$(basename "${BASH_SOURCE[0]}")
SCRIPT_REPO="https://gitlab.com/syne/freebsd"
SCRIPT_BACKTITLE="FreeBSD bootstrap script : Version $SCRIPT_VERSION : $SCRIPT_REPO"

PACKAGE_FILE="./packages.full"
DATABASE_FILE="/var/db/pkg/repo-FreeBSD.sqlite"

DIALOG_HEIGHT=10
DIALOG_WIDTH=50
DIALOG_OK=0
DIALOG_CANCEL=1
DIALOG_EXTRA=3

exec_script()
{
	exec "$0" ./"$SCRIPT_FILE"
}

about()
{
	dialog --backtitle "$SCRIPT_BACKTITLE" --title "About" --msgbox "\n\nThis repository is my current FreeBSD setup as of June 2018 to present, which comes with my custom configuration files. By running this script it'll bootstrap my setup to your user of choice: required packages are installed, configuration files are copied, the suckless utils are compiled and any subsequent services are enabled. Before running this I assume you've met the prerequisites, taking the preliminary actions needed in order to complete the setup successfully. For further information checkout the README regarding the setup.\n\nhttps://gitlab.com/syne/freebsd" 23 $DIALOG_WIDTH 
	exec_script
}

preinstall_check()
{
	dialog --backtitle "$SCRIPT_BACKTITLE" --title "Preinstall check" --msgbox "\n\nTo begin lets check the current user permissions." $DIALOG_HEIGHT $DIALOG_WIDTH 
	
	[[ "$(id -u)" -eq 0 ]] && {
		dialog --backtitle "$SCRIPT_BACKTITLE" --title "Abort" \
			--no-label "Exit" --yes-label "Restart" --yesno \
			"\n\nPlease re-run this script as a non-privileged user." $DIALOG_HEIGHT $DIALOG_WIDTH
		[[ $? -eq $DIALOG_CANCEL ]] && exit || exec_script
	}

	[[ -z "$(pkg info -x security/doas 2>/dev/null | head -n1)" ]] && {
		dialog --backtitle "$SCRIPT_BACKTITLE" --title "Abort" \
			--no-label "Exit" --yes-label "Restart" --yesno \
			"\n\nPlease install doas by typing: 'pkg install security/doas' with a privileged user; after add your user account with the command: echo 'permit nopass your_user as root' | tee -s /usr/local/etc/doas.conf - then re-run the script." 0 $DIALOG_WIDTH 
		[[ $? -eq $DIALOG_CANCEL ]] && exit || exec_script
	}

	dialog --backtitle "$SCRIPT_BACKTITLE" --title "Preinstall check" --msgbox "\n\nPreinstall user check passed without any errors." $DIALOG_HEIGHT $DIALOG_WIDTH
}

has_package()
{
	[[ -z "$(pkg info -x "$1" 2>/dev/null | head -n1)" ]] && doas pkg install -y "$1" &>/dev/null
}

package_install()
{
	[[ ! -f $PACKAGE_FILE ]] && {
		dialog --backtitle "$SCRIPT_BACKTITLE" --title "Abort" \
			--no-label "Exit" --yes-label "Restart" --yesno \
			"\n\nPackage file '$PACKAGE_FILE' not found in directory. Please ensure the integrity of the files are not missing or corrupted." 10 50
		[[ $? -eq $DIALOG_CANCEL ]] && exit || exec_script
	}

	[[ ! -f $DATABASE_FILE ]] && {
		dialog --backtitle "$SCRIPT_BACKTITLE" --title "Package metadata" --msgbox "\n\nBefore we begin the package repository will be updated." 10 50
		doas pkg update -f 2>/dev/null
	}

	local __COUNT=0
	local __PACKAGES=()
	local __SELECTED
	while read -r PACKAGE OPT; do
		((++__COUNT))
		__PACKAGES+=("$PACKAGE" "$(pkg rquery -i "%c" "$PACKAGE")" "$OPT")
	done < "$PACKAGE_FILE"
	__SELECTED=$(dialog --backtitle "$SCRIPT_BACKTITLE" --title "Select packages" --cancel-label "Back" --checklist "" 0 0 "$__COUNT" "${__PACKAGES[@]}" --stdout)
			
	[[ $? -eq $DIALOG_CANCEL ]] && exec_script
	
	mapfile -t __UPDATED_PACKAGES < <(printf "%s" "$__SELECTED" | tr " " "\n")
	[[ -z "${__UPDATED_PACKAGES[*]}" ]] && {
		dialog --backtitle "$SCRIPT_BACKTITLE" --title "Abort" \
			--no-label "Exit" --yes-label "Restart" --yesno \
			"\n\nNo packages have been selected for installation." $DIALOG_HEIGHT $DIALOG_WIDTH
		[[ $? -eq $DIALOG_CANCEL ]] && exit || exec_script
	}

	local __COUNTER=0
	local __PACKAGE_COUNT="${#__UPDATED_PACKAGES[@]}"
	dialog --title "Fetching supplied packages" --backtitle "$SCRIPT_BACKTITLE" --gauge "" 10 55 < <(
		for PACKAGE in ${__UPDATED_PACKAGES[*]}; do
			STATUS=$((100*(++__COUNTER)/__PACKAGE_COUNT))
		cat <<EOF
XXX
$STATUS

Downloading package $PACKAGE ($__COUNTER/$__PACKAGE_COUNT)

Please wait...
XXX
EOF
			has_package "$PACKAGE"
		done
	)
	dialog --backtitle "$SCRIPT_BACKTITLE" --title "Packages installed" --msgbox "\n\nAll $__PACKAGE_COUNT corresponding packages have been installed successfully." $DIALOG_HEIGHT $DIALOG_WIDTH 
}

bootstrap_files()
{
	local __COUNTER=0
	local __FILE_COUNT
	dialog --backtitle "$SCRIPT_BACKTITLE" --title "Bootstrapping" --gauge "" 10 55 < <(
		mapfile -t __FILES < <(find {.config,.scripts,.suckless,.xinitrc,.tmux.conf} -type f 2>/dev/null)
		
		__FILE_COUNT="${#__FILES[@]}"
		for FILE in ${__FILES[*]}; do
			STATUS=$((100*(++__COUNTER)/__FILE_COUNT))
			cat <<EOF
XXX
$STATUS

Copying file $FILE ($__COUNTER/$__FILE_COUNT)

Please wait...
XXX
EOF
			echo "$FILE" | cpio -p -d "/usr/home/$USER" &>/dev/null
		done
	)
	dialog --backtitle "$SCRIPT_BACKTITLE" --title "Bootstrap complete" --msgbox "\n\nConfiguration files have been copied to your home directory." $DIALOG_HEIGHT $DIALOG_WIDTH
}

dein_check()
{
	[[ ! -d "$HOME/.cache/dein" ]] && {
		fetch -qo - https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh | bash -s "$HOME/.cache/dein" &>/dev/null
	}
}

compile_utils()
{
	dialog --backtitle "$SCRIPT_BACKTITLE" --title "Suckless utilities" --msgbox "\n\nThe suckless utils will now be compiled and installed on your system." 10 50
	doas make CC="ccache cc" install clean -C "$HOME/.suckless/dwm"
	doas make CC="ccache cc" install clean -C "$HOME/.suckless/st"
	doas make CC="ccache cc" install clean -C "$HOME/.suckless/dmenu"
	dialog --backtitle "$SCRIPT_BACKTITLE" --title "Suckless utilities" --msgbox "\n\nCompilation complete." 10 50
}

virtualbox_enable()
{
	dialog --backtitle "$SCRIPT_BACKTITLE" --title "VirtualBox" --yesno "\n\nAre you running this machine in VirtualBox?" $DIALOG_HEIGHT $DIALOG_WIDTH
	[[ $? -eq $DIALOG_OK ]] && {
		doas sysrc vboxguest_enable="YES" >/dev/null
		doas sysrc vboxservice_enable="YES" >/dev/null
	}
}

nvidia_enable()
{
	dialog --backtitle "$SCRIPT_BACKTITLE" --title "NVIDIA Drivers" --yesno "\n\nAre you using an NVIDIA GPU?" $DIALOG_HEIGHT $DIALOG_WIDTH
	[[ $? -eq $DIALOG_OK ]] && {
		echo "nvidia-modeset_load=\"YES\"" | doas tee -a /boot/loader.conf >/dev/null
		echo "linux_load=\"YES\"" | doas tee -a /boot/loader.conf >/dev/null
	}
}

finish()
{
		dialog --backtitle "$SCRIPT_BACKTITLE" --title "Installation finished" \
			--no-label "Exit" --yes-label "Reboot" --yesno \
			"\n\nBoostrap completed. Please reboot your system to finalize the changes." $DIALOG_HEIGHT $DIALOG_WIDTH
		[[ $? -eq $DIALOG_OK ]] && doas reboot || exit	
}

main()
{
	local MENU_INSTALL=$DIALOG_OK
	local MENU_EXIT=$DIALOG_CANCEL
	local MENU_ABOUT=$DIALOG_EXTRA
	
	dialog --backtitle "$SCRIPT_BACKTITLE" --title "Welcome" --extra-button --extra-label "About" --ok-label "Install" --cancel-label "Exit" --yesno "\n\nWelcome to syne's FreeBSD bootstrap script v$SCRIPT_VERSION! To begin the setup please select the install option." $DIALOG_HEIGHT $DIALOG_WIDTH 

	case $? in
		$MENU_INSTALL)
			# check for user permissions
			preinstall_check
			
			# install selected packages
			package_install
			
			# set default shell to fish
			doas chsh -s "$(command -v fish)" "$USER"	
			
			# generate machine-id and enable dbus startup services
			dbus-uuidgen | doas tee /etc/machine-id >/dev/null 
			doas sysrc dbus_enable="YES" >/dev/null
			doas sysrc hald_enable="YES" >/dev/null
			
			# bootstrap files to user directory
			bootstrap_files

			# symlink scripts to /usr/local/bin (needed for dwm keybinds)
			doas ln -s "$HOME/.scripts/"{open-stream,screenshot} /usr/local/bin 2>/dev/null

			# check if dein is installed
			dein_check

			# compile Suckless utilities
			compile_utils

			# check if running in VirtualBox
			virtualbox_enable
			
			# check if running nvidia gpu
			nvidia_enable

			# finalize changes (requires reboot)
			finish
			;;
		$MENU_EXIT)
			exit 0 
			;;
		$MENU_ABOUT)
			# display the about menu
			about
			;;
	esac
}

main "$@"
