#!/bin/sh

# shellcheck source=/dev/null
. "$HOME/.config/gitlab"

readonly BLUE="\033[34m"
readonly RED="\033[31m"
readonly RESET="\033[0m"

usage() {
	echo "usage: gl-port [-u update | -a add] [-s show-diff] [-r show-svn-revisions] [-p port] [-c category] [-l log-limit, default: 1] [-e log-entry, default: 2] [-m commit-message] [-d ports-dir] [-v version, default: HEAD] [-n svn-revisions]"
	exit 1
}

if [ $# -lt 2 ]; then
	usage
fi

DIR="${GITLABDIR}/ports"
ENTRY=1
LIMIT=-l2
VERSION=HEAD
while getopts "p:c:l:e:m:d:v:n:uasr" OPT; do
	case "${OPT}" in
		p) readonly PORT="${OPTARG}" ;;
		c) readonly CATEGORY="${OPTARG}" ;;
		l) readonly LIMIT=-l"${OPTARG}" ;;
		e) readonly ENTRY="${OPTARG}" ;;
		m) readonly COMMITMSG="${OPTARG}" ;;
		d) readonly DIR="${OPTARG}" ;;
		v) readonly VERSION="${OPTARG}" ;;
		n) readonly REVISIONS="${OPTARG}" ;;
		u) readonly UPDATE=true ;;
		a) readonly ADD=true ;;
		s) readonly SHOW=true ;;
		r) readonly SHOWREVISION=true ;;
		*) usage ;;
	esac
done

print_info() {
	if [ -z "${SHOW}" ] && [ -z "${SHOWREVISION}" ]; then
		printf "INFO: %b%s%b\n" "${BLUE}" "$*" "${RESET}"
	fi
}

print_error() {
	if [ -z "${SHOW}" ] && [ -z "${SHOWREVISION}" ]; then
		printf "ERROR: %b%s%b\n" "${RED}" "$*" "${RESET}"
	fi
	exit 1
}

if [ -z "${UPDATE}" ] && [ -z "${ADD}" ] || [ -z "${PORT}" ] || [ -z "${CATEGORY}" ]; then
	usage
fi

if [ ! -d "${DIR}" ]; then
	print_error "'${DIR}' is not a valid directory"
fi

readonly PORTFULL="${CATEGORY}/${PORT}"
readonly PORTPATH="${DIR}/${PORTFULL}"
if [ "${UPDATE}" = true ] && [ ! -d "${PORTPATH}" ]; then
	print_error "'${PORTFULL}' is not a valid port"
fi

readonly TMP=$(mktemp -d)
cleanup() {
	print_info "Cleaning up temp directory"
	rm -rf "${TMP}"
	exit 0
}

readonly RC="${TMP}/status"
echo 0 > "${RC}"

readonly DIFF="${TMP}/${PORT}.diff"
(
	cd "${TMP}" || exit
	print_info "Checking out latest SVN revision @ ${PORTFULL}"
	svn checkout --depth empty "https://svn.FreeBSD.org/ports/head/${PORTFULL}" . > /dev/null 2>&1

	if [ "${SHOWREVISION}" = true ]; then
		echo 1 > "${RC}"
		ENTRY=0
		# shellcheck disable=SC2039
		IFS=$'\n'
		for LOG in $(svn log | sed "/^$/d" | awk '/r[0-9]/{rev=$1; getline; msg=$0; print rev,msg}'); do
			echo "e${ENTRY} ${LOG}"
			ENTRY=$((ENTRY + 1))
		done
		exit 0
	fi

	STATUS=$?
	if [ "${STATUS}" != 0 ]; then
		echo ${STATUS} > "${RC}"
		print_error "Unable to checkout, is '${PORTFULL}' a valid port?"
	fi

	# shellcheck disable=SC2030
	if [ "${UPDATE}" = true ]; then
		# Edge cases where e.g. PORTREVISION is bumped multiple times, port is updated and not in sync with the git repo
		if [ -n "${REVISIONS}" ]; then
			svn diff -r "${REVISIONS}" 2> /dev/null > "${DIFF}"
		else
			# Typically used in cases where it's a simple version bump
			REVISION=$(svn log "${LIMIT}" --xml 2> /dev/null | xq -r '.[].logentry['"${ENTRY}"']."@revision"' 2> /dev/null)
			echo "${REVISION}" | xargs -I % svn diff -r %:"${VERSION}" 2> /dev/null > "${DIFF}"
		fi
	else
		if [ -d "${PORTPATH}" ]; then
			echo 1 > "${RC}"
			print_error "'${PORTFULL}' already exists in repository"
		fi

		svn diff -r 0:HEAD > "${DIFF}"
	fi

	STATUS=$?
	if [ "${STATUS}" != 0 ]; then
		echo ${STATUS} > "${RC}"
		print_error "Could not generate patch"
	fi

	print_info "Generating diff via commit(s) ${REVISIONS:-$REVISION:$VERSION}"
)

if [ "$(cat "${RC}")" != 0 ]; then
	cleanup
fi

if [ "${SHOW}" = true ]; then
	cat "${DIFF}"
	cleanup
fi

if [ "${ADD}" = true ]; then
	mkdir -p "${PORTPATH}"
fi
(
	cd "${PORTPATH}" || exit

	print_info "Patching ${PORTFULL}"
	patch -p0 -s < "${DIFF}"
	find . -type f \( -name "*.orig" -o -name "*.rej" \) -delete
)

if [ "${ADD}" = true ]; then
	# shellcheck disable=SC2031
	readonly REVISION=$(cd "${TMP}" && svn log -r 0:HEAD -l1 --xml | xq -r '.log.logentry."@revision"')
elif [ -n "${REVISIONS}" ]; then
	readonly REVISION=$(echo "${REVISIONS}" | awk -F: '{print $2}')
else
	readonly REVISION=$(cd "${TMP}" && svn log -l1 --xml | xq -r '.log.logentry."@revision"')
fi
readonly PORTSET="https://svnweb.freebsd.org/ports?view=revision&revision=${REVISION}"
# shellcheck disable=SC2016
readonly VERSION=$(awk '/(DIST|PORT)VERSION=.*/{print $2}' "${PORTPATH}/Makefile")
readonly SIGNED=$(cat "$HOME/.gitmessage")

if [ -n "${COMMITMSG}" ]; then
	readonly MESSAGE="${PORTFULL}: ${COMMITMSG}"
elif [ "${UPDATE}" = true ]; then
	readonly MESSAGE="${PORTFULL}: Update to ${VERSION}"
else
	readonly MESSAGE="New port: ${PORTFULL}"
fi
readonly EMAIL=$(git config user.email)
readonly NAME=$(git config user.name)
readonly COMMIT=$(printf "%s\n\nsvn-id: %s\n%s" "${MESSAGE}" "${PORTSET}" "${SIGNED}")
(
	cd "${PORTPATH}" || exit

	git add .
	CHANGES=$(git diff --cached --name-only | wc -l | tr -d ' ')
	if [ "${CHANGES}" -lt 1 ]; then
		print_error "No changes to be commited"
	fi

	print_info "Adding ${CHANGES} change(s) to repository"
	print_info "Commiting from user ${NAME} <${EMAIL}>"
	echo
	git commit -S -m "${COMMIT}"

	echo
	# shellcheck disable=SC2039
	read -rp "Push commit to master? (yes/no) [no]: " OPTION
	OPTION=$(echo "${OPTION}" | tr "[:upper:]" "[:lower:]")
	if [ "${OPTION}" = yes ] || [ "${OPTION}" = y ]; then
		git push origin master
	fi
	echo
)

cleanup
